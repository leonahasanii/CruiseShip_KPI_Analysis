---
title: "Cruise Ships KPI Analysis"
author: "Leona Hasani"
date: "10.02.2024"
format:
  html:                     
    standalone: true        
    embed-resources: true   
    code-fold: false        
    number-sections: true  
    toc: true 
highlight-style: github 
abstract: ""         
---

# Data Preparation

```{python}
#| label: importing the libraries
#| echo: false
#| message: false
#| include: false

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
from fancyimpute import IterativeImputer
import plotly.graph_objects as go
from plotly.subplots import make_subplots
```

```{python}
#| label: importing the data
#| echo: false
#| message: false
#| include: false


data = pd.read_csv('task_data/data.csv', sep=",", header=0, index_col=False)
```


```{python}
#| label: data head
#| echo: false
#| message: false
#| include: false

data.head()
```


```{python}
#| label: data describe
#| echo: false
#| message: false
#| include: false

data.describe()
```


```{python}
#| label: data nunique
#| echo: false
#| message: false
#| include: false

data.nunique
```

```{python}
#| label: data info
#| echo: false
#| message: false
#| include: false

data.info()
```

```{python}
#| label: data NAs
#| echo: false
#| message: false
#| include: false

data.isna().sum()
```


```{python}
# Parse Start Time and End Time columns to datetime format
data['Start Time'] = pd.to_datetime(data['Start Time'], format='%Y-%m-%dT%H:%M:%S')
data['End Time'] = pd.to_datetime(data['End Time'], format='%Y-%m-%dT%H:%M:%S')
```


```{python}

# Calculating the correlation matrix
corr_matrix = data.corr()

# Creating the correlation heatmap using plotly
fig = px.imshow(corr_matrix, 
                text_auto=True, 
                aspect="auto", 
                color_continuous_scale='Blues',
                title="Correlation Heatmap")

# Show the plot
fig.show()
```

```{python}
# Create a heatmap of missing values
plt.figure(figsize=(12, 8))
sns.heatmap(data.isnull(), cbar=False, cmap='viridis')

# Show the plot
plt.title('Heatmap of Missing Values in the DataFrame')
plt.show()
```

```{python}
data = data.drop(columns=['Depth (m)'])
```

```{python}
# Create a heatmap of missing values
plt.figure(figsize=(12, 8))
sns.heatmap(data.isnull(), cbar=False, cmap='viridis')

# Show the plot
plt.title('Heatmap of Missing Values in the DataFrame')
plt.show()
```

```{python}

# Identify columns with missing values
columns_with_na = data.columns[data.isnull().any()]

# Initialize the MICE imputer
mice_imputer = IterativeImputer()

# Apply MICE only to the columns with missing values
df_imputed = data.copy()  # Create a copy to keep the original DataFrame
df_imputed[columns_with_na] = mice_imputer.fit_transform(data[columns_with_na])

# Check the result
print(df_imputed.isnull().sum())  # This should show 0 missing values for all columns with missing values


```

```{python}
#plt.figure(figsize=(12, 8))
#sns.heatmap(df_imputed.isnull(), cbar=False, cmap='viridis')

# Show the plot
#plt.title('Heatmap of Missing Values in the DataFrame')
#plt.show()
```

```{python}
#df_imputed.to_csv('task_data/df_imputed.csv', index=False)
```

```{python}
df = pd.read_csv('task_data/df_imputed.csv', sep=",", header=0, index_col=False)
```

```{python}

plt.figure(figsize=(12, 8))
sns.heatmap(df.isnull(), cbar=False, cmap='viridis')

# Show the plot
plt.title('Heatmap of Missing Values in the DataFrame')
plt.show()

```

```{python}

# Check for duplicates across all columns
duplicate_rows = df[df.duplicated()]


# Check how many duplicates exist
print(f"Number of duplicate rows: {duplicate_rows.shape[0]}")
```

```{python}
# Create a list of numerical variables
numerical_columns = df.select_dtypes(include='number').columns

# Melt the DataFrame to long format for FacetGrid
df_melted = df.melt(value_vars=numerical_columns, var_name='Feature', value_name='Value')

# Create a FacetGrid with boxplots for each numerical variable
g = sns.FacetGrid(df_melted, col='Feature', col_wrap=4, height=4, sharex=False, sharey=False)

# Map the boxplot while ensuring we correctly define the axes
g.map_dataframe(sns.boxplot, x='Value', color='skyblue')

g.set_titles(col_template="{col_name}")
g.set_axis_labels('Value', 'Feature')
plt.subplots_adjust(top=0.9)
g.fig.suptitle('Boxplots of Numerical Features', fontsize=16)

plt.show()
```

```{python}

# Parse Start Time and End Time columns to datetime format
df['Start Time'] = pd.to_datetime(df['Start Time'], format='%Y-%m-%dT%H:%M:%S')
df['End Time'] = pd.to_datetime(df['End Time'], format='%Y-%m-%dT%H:%M:%S')

# Create a new column to calculate the duration of each measurement interval in minutes
df['Duration (Minutes)'] = (df['End Time'] - df['Start Time']).dt.total_seconds() / 60

# Example of calculating total power consumption over each interval
df['Total Power Consumption (MW)'] = (
    df['Power Galley 1 (MW)'] + 
    df['Power Galley 2 (MW)'] + 
    df['Power Service (MW)'] + 
    df['HVAC Chiller 1 Power (MW)'] + 
    df['HVAC Chiller 2 Power (MW)'] + 
    df['HVAC Chiller 3 Power (MW)'] + 
    df['Scrubber Power (MW)'] + 
    df['Diesel Generator 1 Power (MW)'] +
    df['Diesel Generator 2 Power (MW)'] +
    df['Diesel Generator 3 Power (MW)'] +
    df['Diesel Generator 4 Power (MW)'] +
    df['Propulsion Power (MW)'] + 
    df['Port Side Propulsion Power (MW)'] + 
    df['Starboard Side Propulsion Power (MW)'] + 
    df['Bow Thruster 1 Power (MW)'] + 
    df['Bow Thruster 2 Power (MW)'] + 
    df['Bow Thruster 3 Power (MW)'] + 
    df['Stern Thruster 1 Power (MW)'] + 
    df['Stern Thruster 2 Power (MW)']
)

df['All Engines Fuel Flow Rate (kg/h)'] = (
  df['Main Engine 1 Fuel Flow Rate (kg/h)'] +
  df['Main Engine 2 Fuel Flow Rate (kg/h)'] +
  df['Main Engine 3 Fuel Flow Rate (kg/h)'] +
  df['Main Engine 4 Fuel Flow Rate (kg/h)']
)

df['All Boiler Fuel Flow Rate (L/h)'] = (
  df['Boiler 1 Fuel Flow Rate (L/h)'] +
  df['Boiler 2 Fuel Flow Rate (L/h)']
)

# Group by time intervals to analyze patterns
#df.set_index('Start Time', inplace=True)

```


```{python}
df.head()
```



```{python}


# Extract the date from the Start Time column
df['Date'] = df['Start Time'].dt.date

# Group by both Date and Vessel Name, and then sum the numeric columns
df_grouped_by_day_vessel = df.groupby(['Date', 'Vessel Name']).sum(numeric_only=True).reset_index()

# Display the first few rows of the grouped DataFrame
print(df_grouped_by_day_vessel.head())

```


```{python}
df_grouped_by_day_vessel
```

```{python}
print(df_grouped_by_day_vessel.columns)
```

```{python}
# Define the columns you want to divide by 288
columns_to_divide = ['Sea Temperature (Celsius)', 'Speed Over Ground (knots)', 'True Wind Speed (knots)', 'Relative Wind Speed (knots)', 'Speed Through Water (knots)']

# Apply division by 288 for the specified columns
df_grouped_by_day_vessel[columns_to_divide] = df_grouped_by_day_vessel[columns_to_divide].div(288)

# Display the updated DataFrame
print(df_grouped_by_day_vessel.head())

```

```{python}
df_grouped_by_day_vessel.head()
```

```{python}
# List of the columns I want to remove
columns_to_remove = [
    'Latitude (Degrees)',
    'Longitude (Degrees)',
    'Relative Wind Angle (Degrees)',
    'True Wind Angle (Degrees)',
    'Relative Wind Direction (Degrees)',
    'True Wind Direction (Degrees)',
    'Draft (m)',
    'Local Time (h)',
    'Trim (m)'
]

# Drop the columns you don't want
new_df = df_grouped_by_day_vessel.drop(columns=columns_to_remove, axis=1)

# Display the updated DataFrame
new_df.head()

```

```{python}
new_df
```

```{python}
#| label: diving the day into parts
#| echo: false
#| message: true
#| include: false
#| eval: false 

# Define the bins and labels with adjusted bin edges to avoid overlaps
bins = [0, 5, 8, 11, 12, 15, 17, 19, 21, 24]
labels = ['Night', 'Early Morning', 'Late Morning', 'Morning', 'Early Afternoon', 'Late Afternoon', 'Early Evening', 'Evening', 'Night']

# Ensure 'Start Time' is in datetime format
data['Start Time'] = pd.to_datetime(data['Start Time'])

# Create a new column 'Hour' by extracting the hour from 'Start Time'
data['Hour'] = data['Start Time'].dt.hour

# Use pd.cut to categorize the parts of the day
data['Part of Day'] = pd.cut(data['Hour'], bins=bins, labels=labels, right=False, include_lowest=True, ordered=False)

# Extract the date from 'Start Time' for grouping
data['Date'] = data['Start Time'].dt.date

# Group by Date, Vessel Name, and Part of Day, then sum the numerical columns
df_grouped_by_part_of_day = data.groupby(['Date', 'Vessel Name', 'Part of Day']).sum(numeric_only=True).reset_index()

# Display the first few rows of the new DataFrame
print(df_grouped_by_part_of_day.head())

# Optionally, check how many unique combinations we have
print(df_grouped_by_part_of_day[['Date', 'Vessel Name', 'Part of Day']].drop_duplicates().shape)

```


```{python}
#| echo: false
#| message: true
#| include: false
#| eval: false 
df_grouped_by_part_of_day.info()
```


```{python}
#| echo: false
#| message: true
#| include: false
#| eval: false 
df_grouped_by_part_of_day
```

# Descriptive Statistics

```{python}
df_grouped_by_day_vessel
```

# Performance Analysis

## Total Power Consumption (MW)


```{python}
# Assuming df is your dataset with power and fuel variables

plt.figure(figsize=(12, 6))

sns.lineplot(data=df, x='Date', y='Total Power Consumption (MW)', hue='Vessel Name', palette='Set1')

# Step 3: Set plot labels and title
plt.xlabel('Date')
plt.ylabel('Total Power Consumption (MW)')
plt.title('Total Power Consumption Over Time by Vessel')
plt.xticks(rotation=45)
plt.legend(title='Vessel')

# Step 4: Display the plot
plt.tight_layout()
plt.show()
```

```{python}
plt.figure(figsize=(12, 6))

sns.lineplot(data=df_grouped_by_day_vessel, x='Date', y='Total Power Consumption (MW)', hue='Vessel Name', palette='Set1')

# Step 3: Set plot labels and title
plt.xlabel('Date')
plt.ylabel('Total Power Consumption (MW)')
plt.title('Total Power Consumption Over Time by Vessel')
plt.xticks(rotation=45)
plt.legend(title='Vessel')

# Step 4: Display the plot
plt.tight_layout()
plt.show()
```

```{python}
# Define the power source columns to sum for each vessel
power_sources = [
    'Power Galley 1 (MW)', 
    'Power Galley 2 (MW)', 
    'Power Service (MW)', 
    'HVAC Chiller 1 Power (MW)', 
    'HVAC Chiller 2 Power (MW)', 
    'HVAC Chiller 3 Power (MW)', 
    'Scrubber Power (MW)', 
    'Diesel Generator 1 Power (MW)',
    'Diesel Generator 2 Power (MW)',
    'Diesel Generator 3 Power (MW)',
    'Diesel Generator 4 Power (MW)',
    'Propulsion Power (MW)', 
    'Port Side Propulsion Power (MW)', 
    'Starboard Side Propulsion Power (MW)', 
    'Bow Thruster 1 Power (MW)', 
    'Bow Thruster 2 Power (MW)', 
    'Bow Thruster 3 Power (MW)', 
    'Stern Thruster 1 Power (MW)', 
    'Stern Thruster 2 Power (MW)'
]

# Calculate total power consumption for each vessel
power_source_totals_vessel_1 = [df[df['Vessel Name'] == 'Vessel 1'][source].sum() for source in power_sources]
power_source_totals_vessel_2 = [df[df['Vessel Name'] == 'Vessel 2'][source].sum() for source in power_sources]

# Create pie chart for Vessel 1
fig_vessel_1 = go.Figure(data=[go.Pie(
    labels=power_sources,
    values=power_source_totals_vessel_1,
    hole=0.3,  # Create a donut chart by setting a hole
    hoverinfo='label+value+percent',  # Show label, value, and percentage on hover
)])

# Update layout for Vessel 1
fig_vessel_1.update_layout(
    title='Contribution of Power Sources to Total Power Consumption (MW) - Vessel 1',
    height=600,
    width=800,
    template='plotly_white'
)

# Show the plot for Vessel 1
fig_vessel_1.show()

# Create pie chart for Vessel 2
fig_vessel_2 = go.Figure(data=[go.Pie(
    labels=power_sources,
    values=power_source_totals_vessel_2,
    hole=0.3,  # Create a donut chart by setting a hole
    hoverinfo='label+value+percent',  # Show label, value, and percentage on hover
)])

# Update layout for Vessel 2
fig_vessel_2.update_layout(
    title='Contribution of Power Sources to Total Power Consumption (MW) - Vessel 2',
    height=600,
    width=800,
    template='plotly_white'
)

# Show the plot for Vessel 2
fig_vessel_2.show()
```



```{python}
# Step 1: Set the figure size
plt.figure(figsize=(12, 6))

# Step 2: Create the line plot
sns.lineplot(data=df, x='Date', y='All Engines Fuel Flow Rate (kg/h)', hue='Vessel Name', palette='Set1')

# Step 3: Set plot labels and title
plt.xlabel('Date')
plt.ylabel('Total Fuel Flow Rate (kg/h)')
plt.title('Total Fuel Flow Rate Over Time by Vessel')
plt.xticks(rotation=45)
plt.legend(title='Vessel')

# Step 4: Display the plot
plt.tight_layout()
plt.show()
```

```{python}
plt.figure(figsize=(12, 6))

# Assuming df_grouped_by_day_vessel is a pre-grouped DataFrame
sns.lineplot(data=df_grouped_by_day_vessel, x='Date', y='All Engines Fuel Flow Rate (kg/h)', hue='Vessel Name', palette='Set1')

# Step 3: Set plot labels and title
plt.xlabel('Date')
plt.ylabel('Total Fuel Flow Rate (kg/h)')
plt.title('Total Fuel Flow Rate Over Time by Vessel (Grouped by Day)')
plt.xticks(rotation=45)
plt.legend(title='Vessel')

# Step 4: Display the plot
plt.tight_layout()
plt.show()
```


```{python}
# Define the engine power source columns to sum for each vessel
engine_power_sources = [
    'Main Engine 1 Fuel Flow Rate (kg/h)', 
    'Main Engine 2 Fuel Flow Rate (kg/h)', 
    'Main Engine 3 Fuel Flow Rate (kg/h)', 
    'Main Engine 4 Fuel Flow Rate (kg/h)'
]

# Calculate total engine power consumption for each vessel
engine_power_totals_vessel_1 = [df[df['Vessel Name'] == 'Vessel 1'][source].sum() for source in engine_power_sources]
engine_power_totals_vessel_2 = [df[df['Vessel Name'] == 'Vessel 2'][source].sum() for source in engine_power_sources]

# Create pie chart for Vessel 1
fig_engine_vessel_1 = go.Figure(data=[go.Pie(
    labels=engine_power_sources,
    values=engine_power_totals_vessel_1,
    hole=0.3,  # Create a donut chart by setting a hole
    textinfo='label+percent', 
    hoverinfo='label+value+percent',  # Show label, value, and percentage on hover
)])

# Update layout for Vessel 1
fig_engine_vessel_1.update_layout(
    title='Contribution of Engine Fuel Flow Rates to Total Fuel Consumption (kg/h) - Vessel 1',
    height=600,
    width=800,
    template='plotly_white'
)

# Show the plot for Vessel 1
fig_engine_vessel_1.show()

# Create pie chart for Vessel 2
fig_engine_vessel_2 = go.Figure(data=[go.Pie(
    labels=engine_power_sources,
    values=engine_power_totals_vessel_2,
    hole=0.3,  # Create a donut chart by setting a hole
    textinfo='label+percent', 
    hoverinfo='label+value+percent',  # Show label, value, and percentage on hover
)])

# Update layout for Vessel 2
fig_engine_vessel_2.update_layout(
    title='Contribution of Engine Fuel Flow Rates to Total Fuel Consumption (kg/h) - Vessel 2',
    height=600,
    width=800,
    template='plotly_white'
)

# Show the plot for Vessel 2
fig_engine_vessel_2.show()
```



```{python}
plt.figure(figsize=(12, 6))

sns.lineplot(data=df, x='Date', y='All Boiler Fuel Flow Rate (L/h)', hue='Vessel Name', palette='Set1')

# Step 3: Set plot labels and title
plt.xlabel('Date')
plt.ylabel('Total Boiler Fuel Flow Rate (L/h)')
plt.title('Total Boiler Fuel Flow Rate Over Time by Vessel')
plt.xticks(rotation=45)
plt.legend(title='Vessel')

# Step 4: Display the plot
plt.tight_layout()
plt.show()

```

```{python}
# Assuming you have a DataFrame grouped by date and vessel
plt.figure(figsize=(12, 6))

sns.lineplot(data=df_grouped_by_day_vessel, x='Date', y='All Boiler Fuel Flow Rate (L/h)', hue='Vessel Name', palette='Set1')

# Step 3: Set plot labels and title
plt.xlabel('Date')
plt.ylabel('Total Boiler Fuel Flow Rate (L/h)')
plt.title('Total Boiler Fuel Flow Rate Over Time by Vessel')
plt.xticks(rotation=45)
plt.legend(title='Vessel')

# Step 4: Display the plot
plt.tight_layout()
plt.show()

```

```{python}
# Calculate total boiler fuel flow for each vessel
boiler_source_totals_vessel_1 = [
    df[df['Vessel Name'] == 'Vessel 1']['Boiler 1 Fuel Flow Rate (L/h)'].sum(),
    df[df['Vessel Name'] == 'Vessel 1']['Boiler 2 Fuel Flow Rate (L/h)'].sum()
]

boiler_source_totals_vessel_2 = [
    df[df['Vessel Name'] == 'Vessel 2']['Boiler 1 Fuel Flow Rate (L/h)'].sum(),
    df[df['Vessel Name'] == 'Vessel 2']['Boiler 2 Fuel Flow Rate (L/h)'].sum()
]

# List of boiler names
boiler_sources = ['Boiler 1', 'Boiler 2']

# Create pie chart for Vessel 1
fig_boiler_vessel_1 = go.Figure(data=[go.Pie(
    labels=boiler_sources,
    values=boiler_source_totals_vessel_1,
    hole=0.3,  # Create a donut chart by setting a hole
    textinfo='label+percent',  # Show label and percentage
    hoverinfo='label+value+percent',  # Show label, value, and percentage on hover
)])

# Update layout for Vessel 1
fig_boiler_vessel_1.update_layout(
    title='Contribution of Boiler Fuel Flow Sources to Total Fuel Consumption (L/h) - Vessel 1',
    height=600,
    width=800,
    template='plotly_white'
)

# Show the plot for Vessel 1
fig_boiler_vessel_1.show()

# Create pie chart for Vessel 2
fig_boiler_vessel_2 = go.Figure(data=[go.Pie(
    labels=boiler_sources,
    values=boiler_source_totals_vessel_2,
    hole=0.3,  # Create a donut chart by setting a hole
    textinfo='label+percent',  # Show label and percentage
    hoverinfo='label+value+percent',  # Show label, value, and percentage on hover
)])

# Update layout for Vessel 2
fig_boiler_vessel_2.update_layout(
    title='Contribution of Boiler Fuel Flow Sources to Total Fuel Consumption (L/h) - Vessel 2',
    height=600,
    width=800,
    template='plotly_white'
)

# Show the plot for Vessel 2
fig_boiler_vessel_2.show()

```


```{python}


# Create scatter plot for Vessel 1
fig_speed_fuel_vessel_1 = px.scatter(
    df[df['Vessel Name'] == 'Vessel 1'],
    x='Speed Over Ground (knots)',  # Actual speed column name
    y='All Engines Fuel Flow Rate (kg/h)',  # Actual fuel consumption column name
    title='Speed vs. Fuel Consumption - Vessel 1',
    labels={
        'Speed Over Ground (knots)': 'Speed Over Ground (knots)',
        'All Engines Fuel Flow Rate (kg/h)': 'Fuel Consumption (kg/h)'
    },
    template='plotly_white'
)

# Customize the appearance of Vessel 1
fig_speed_fuel_vessel_1.update_traces(marker=dict(color='blue', opacity=0.6))  # Set color and opacity

# Show the plot for Vessel 1
fig_speed_fuel_vessel_1.show()

# Create scatter plot for Vessel 2
fig_speed_fuel_vessel_2 = px.scatter(
    df[df['Vessel Name'] == 'Vessel 2'],
    x='Speed Over Ground (knots)',  # Actual speed column name
    y='All Engines Fuel Flow Rate (kg/h)',  # Actual fuel consumption column name
    title='Speed vs. Fuel Consumption - Vessel 2',
    labels={
        'Speed Over Ground (knots)': 'Speed Over Ground (knots)',
        'All Engines Fuel Flow Rate (kg/h)': 'Fuel Consumption (kg/h)'
    },
    template='plotly_white'
)

# Customize the appearance of Vessel 2
fig_speed_fuel_vessel_2.update_traces(marker=dict(color='orange', opacity=0.6))  # Set color and opacity

# Show the plot for Vessel 2
fig_speed_fuel_vessel_2.show()

```

```{python}
from scipy.stats import pearsonr

# Sample DataFrame creation (replace this with your actual DataFrame)
# df = pd.read_csv('your_data.csv')  # Uncomment to load your data

# Calculate Pearson correlation coefficient for Vessel 1
vessel_1_data = df[df['Vessel Name'] == 'Vessel 1']
pearson_corr_vessel_1, _ = pearsonr(
    vessel_1_data['Speed Over Ground (knots)'],
    vessel_1_data['All Engines Fuel Flow Rate (kg/h)']
)

pearson_corr_vessel_1
```

```{python}
from scipy.stats import pearsonr

# Sample DataFrame creation (replace this with your actual DataFrame)
# df = pd.read_csv('your_data.csv')  # Uncomment to load your data

# Calculate Pearson correlation coefficient for Vessel 1
vessel_2_data = df[df['Vessel Name'] == 'Vessel 2']
pearson_corr_vessel_2, _ = pearsonr(
    vessel_2_data['Speed Over Ground (knots)'],
    vessel_2_data['All Engines Fuel Flow Rate (kg/h)']
)

pearson_corr_vessel_2

```

```{python}


# Sample DataFrame creation (replace this with your actual DataFrame)
# df = pd.read_csv('your_data.csv')  # Uncomment to load your data

# Calculate Pearson correlation coefficient for Vessel 1
vessel_1_data = df[df['Vessel Name'] == 'Vessel 1']
pearson_corr_vessel_1_power, _ = pearsonr(
    vessel_1_data['Speed Over Ground (knots)'],
    vessel_1_data['Total Power Consumption (MW)']  # Replace with your actual power consumption column name
)

# Create scatter plot for Vessel 1
fig_speed_power_vessel_1 = px.scatter(
    vessel_1_data,
    x='Speed Over Ground (knots)',  # Actual speed column name
    y='Total Power Consumption (MW)',  # Actual power consumption column name
    title=f'Speed vs. Total Power Consumption - Vessel 1 (Pearson Correlation: {pearson_corr_vessel_1_power:.2f})',
    labels={
        'Speed Over Ground (knots)': 'Speed Over Ground (knots)',
        'Total Power Consumption (MW)': 'Total Power Consumption (MW)'
    },
    template='plotly_white'
)

# Customize the appearance of Vessel 1
fig_speed_power_vessel_1.update_traces(marker=dict(color='blue', opacity=0.6))  # Set color and opacity

# Show the plot for Vessel 1
fig_speed_power_vessel_1.show()

# Calculate Pearson correlation coefficient for Vessel 2
vessel_2_data = df[df['Vessel Name'] == 'Vessel 2']
pearson_corr_vessel_2_power, _ = pearsonr(
    vessel_2_data['Speed Over Ground (knots)'],
    vessel_2_data['Total Power Consumption (MW)']  # Replace with your actual power consumption column name
)

# Create scatter plot for Vessel 2
fig_speed_power_vessel_2 = px.scatter(
    vessel_2_data,
    x='Speed Over Ground (knots)',  # Actual speed column name
    y='Total Power Consumption (MW)',  # Actual power consumption column name
    title=f'Speed vs. Total Power Consumption - Vessel 2 (Pearson Correlation: {pearson_corr_vessel_2_power:.2f})',
    labels={
        'Speed Over Ground (knots)': 'Speed Over Ground (knots)',
        'Total Power Consumption (MW)': 'Total Power Consumption (MW)'
    },
    template='plotly_white'
)

# Customize the appearance of Vessel 2
fig_speed_power_vessel_2.update_traces(marker=dict(color='orange', opacity=0.6))  # Set color and opacity

# Show the plot for Vessel 2
fig_speed_power_vessel_2.show()

# Print Pearson correlation coefficients
print(f'Pearson correlation for Vessel 1 (Power Consumption): {pearson_corr_vessel_1_power:.2f}')
print(f'Pearson correlation for Vessel 2 (Power Consumption): {pearson_corr_vessel_2_power:.2f}')

```


## Impact of Sea Conditions

# Comparative Analysis

## Vessel Comparison

## Performance Trends 

# Key Performance Indicators

```{python}
# Step 1: Create a new DataFrame
df_new = df.copy()

# Convert time columns to datetime
df_new['Start Time'] = pd.to_datetime(df_new['Start Time'])
df_new['End Time'] = pd.to_datetime(df_new['End Time'])

# Step 2: Calculate Operational Hours
df_new['Operational Hours'] = (df_new['End Time'] - df_new['Start Time']).dt.total_seconds() / 3600  # Convert seconds to hours

# Step 3: Calculate Total Power Produced (MW)
df_new['Total Power Produced (MW)'] = (
    df_new['Power Galley 1 (MW)'] +
    df_new['Power Galley 2 (MW)'] +
    df_new['Power Service (MW)'] +
    df_new['Diesel Generator 1 Power (MW)'] +
    df_new['Diesel Generator 2 Power (MW)'] +
    df_new['Diesel Generator 3 Power (MW)'] +
    df_new['Diesel Generator 4 Power (MW)'] +
    df_new['HVAC Chiller 1 Power (MW)'] +
    df_new['HVAC Chiller 2 Power (MW)'] +
    df_new['HVAC Chiller 3 Power (MW)'] +
    df_new['Scrubber Power (MW)'] +
    df_new['Propulsion Power (MW)'] +
    df_new['Port Side Propulsion Power (MW)'] +
    df_new['Starboard Side Propulsion Power (MW)'] +
    df_new['Bow Thruster 1 Power (MW)'] +
    df_new['Bow Thruster 2 Power (MW)'] +
    df_new['Bow Thruster 3 Power (MW)'] +
    df_new['Stern Thruster 1 Power (MW)'] +
    df_new['Stern Thruster 2 Power (MW)']
)

# Step 4: Calculate Total Fuel Consumed (kg/h)
df_new['Total Fuel Consumed (kg/h)'] = (
    df_new['Main Engine 1 Fuel Flow Rate (kg/h)'] +
    df_new['Main Engine 2 Fuel Flow Rate (kg/h)'] +
    df_new['Main Engine 3 Fuel Flow Rate (kg/h)'] +
    df_new['Main Engine 4 Fuel Flow Rate (kg/h)'] +
    df_new['All Boiler Fuel Flow Rate (L/h)']  # Convert to kg if necessary
)

# Step 5: Calculate Total Distance Traveled (nautical miles)
df_new['Total Distance Traveled (nautical miles)'] = df_new['Speed Over Ground (knots)'] * df_new['Operational Hours']

# Step 6: Calculate KPIs
kpi_data = df_new.groupby('Vessel Name').agg({
    'Total Power Produced (MW)': 'sum',
    'Total Fuel Consumed (kg/h)': 'sum',
    'Operational Hours': 'sum',
    'Total Distance Traveled (nautical miles)': 'sum'  # Include distance in aggregation
}).reset_index()

# Additional KPIs
kpi_data['Energy Efficiency Ratio (EER)'] = kpi_data['Total Power Produced (MW)'] / kpi_data['Total Fuel Consumed (kg/h)']
kpi_data['Operational Efficiency (MW/hour)'] = kpi_data['Total Power Produced (MW)'] / kpi_data['Operational Hours']
kpi_data['Fuel Efficiency (kg/MW)'] = kpi_data['Total Fuel Consumed (kg/h)'] / kpi_data['Total Power Produced (MW)']
kpi_data['Average Speed (knots)'] = kpi_data['Total Distance Traveled (nautical miles)'] / kpi_data['Operational Hours']

# Display KPIs
print(kpi_data[['Vessel Name', 'Energy Efficiency Ratio (EER)', 'Operational Efficiency (MW/hour)', 'Fuel Efficiency (kg/MW)', 'Average Speed (knots)']])

```

```{python}
import matplotlib.pyplot as plt
import seaborn as sns

# Set the aesthetic style of the plots
sns.set(style="whitegrid")

# Step 1: Create a figure to hold multiple plots
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15, 10))
fig.suptitle('Cruise Ship KPIs Analysis', fontsize=16)

# Step 2: Plot Energy Efficiency Ratio (EER)
sns.barplot(x='Vessel Name', y='Energy Efficiency Ratio (EER)', data=kpi_data, ax=axes[0, 0], palette='viridis')
axes[0, 0].set_title('Energy Efficiency Ratio (EER)')
axes[0, 0].set_ylabel('EER (MW/kg)')
axes[0, 0].set_xticklabels(axes[0, 0].get_xticklabels(), rotation=45)

# Step 3: Plot Operational Efficiency
sns.barplot(x='Vessel Name', y='Operational Efficiency (MW/hour)', data=kpi_data, ax=axes[0, 1], palette='mako')
axes[0, 1].set_title('Operational Efficiency (MW/hour)')
axes[0, 1].set_ylabel('Operational Efficiency (MW/hour)')
axes[0, 1].set_xticklabels(axes[0, 1].get_xticklabels(), rotation=45)

# Step 4: Plot Fuel Efficiency
sns.barplot(x='Vessel Name', y='Fuel Efficiency (kg/MW)', data=kpi_data, ax=axes[1, 0], palette='plasma')
axes[1, 0].set_title('Fuel Efficiency (kg/MW)')
axes[1, 0].set_ylabel('Fuel Efficiency (kg/MW)')
axes[1, 0].set_xticklabels(axes[1, 0].get_xticklabels(), rotation=45)

# Step 5: Plot Average Speed
sns.barplot(x='Vessel Name', y='Average Speed (knots)', data=kpi_data, ax=axes[1, 1], palette='cividis')
axes[1, 1].set_title('Average Speed (knots)')
axes[1, 1].set_ylabel('Average Speed (knots)')
axes[1, 1].set_xticklabels(axes[1, 1].get_xticklabels(), rotation=45)

# Adjust layout
plt.tight_layout(rect=[0, 0.03, 1, 0.95])  # Adjust title position
plt.show()



```



## Energy Efficiency Ratio

## Operational Efficiency

# Visualization

## Time Series Plots

## Bar Charts: Compare power contributions from various sources (e.g., different generators)

## Scatter Plots: Analyze relationships between variables (e.g., speed versus fuel consumption)
